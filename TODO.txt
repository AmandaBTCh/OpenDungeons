--------------- BUGS: ---------------
+  The workers (kobolds) have code in them to ignore enemies (with some
+  probability?) to allow them to worry more about working than fighting, when
+  they are alone with an enemy, however the should either stand their ground and
+  fight or run away, not just stand there working while they are attacked.

*  fix keyboard repeat issue (when the game crashes keyboard repeat is disabled
*  but the OS still thinks it's on, turning it off and then back on again
*  restores the functionality).  This seems to be a bug in OIS so there might
*  not be anything we can do about it.

*  The GameMap::cutCorners() function sometimes causes creatures to walk
*  through walls, this could be a problem with the lineOfSight function.
*  Actually I think it has to do with Creature::positionTile(), this is mostly
*  fixed although positionTile() may still need some work.  I think that this
*  is fixed now.

+  The client has code to handle when messages are split across packets, but
+  the server does not.  This needs to be added.
+
+  when the terminal becomes active if a key is held down the keyup message
+  gets caught by the terminal and the key is "stuck" down.
+
*  Client and server need to negiotiate and set a color for the newly connected
*  client.

*  Visual debugging entities for creatures dissappear after a short time.

*  When creatures are in the state CreatureAction::maneuver, they sometimes get
*  "stuck" behind an obstacle since they only locally follow the field
*  gradient.  This can be fixed by making them make use of GameMap::path() to
*  find a good path to the destination and sticking with it far enough to get
*  them to their destination.  I have partially fixed this by making the
*  creatures push a walkToTile action to their actionQueue to force them to
*  walk a ways but they could still get stuck in a "big" local minima.

+  When using the << and >> operators the 'endl' thing does a flush of the
+  stream, this is likely unnecessary so the endl should usually be replaced by a "\n".

+  Make commandOutput do += rather that = so we see the output form multiple
+  commands. //TODO - Need to check that this does as expected -??

*  When the "tps" terminal command is given a really small value (0.001) the
*  doTurn routine will go into a sleep call for a very long time, subsequent
*  changes of the tps command should cancel the existing sleep routine and
*  re-call it wil the new computed value.  The "fps" command would likely
*  exhibit the exact same behavior.

*  Convert string casts to string constructors

*  Make the rest of the threads properly call threadLockForTurn() and
*  threadUnlockForTurn() to prevent race conditions.

*  Make sure that every class that has a createMesh function also has a
*  variable called meshExists and that it updates and uses it appropriately.

+--------------- FEATURE ADDITIONS: ---------------
*  Add a "stride length" variable to the CreatureClass and set it in the level
*  file to allow the walking animations to work properly, regardless of the
*  move speed.  Leave the other animations alone though.

+  Add a terminal command 'ls seats'.

*  Add a goal type ChatMessage which is automatically met and just chats its
*  arguments in its doSuccessAction().

*  Add a function to encapsulate the semaphore lock/unlock as well as the
*  actual Socket::send() command into a single call in something like
*  sendToServer(), also do the same for server->client communication.

+  When doing the floodfill, instead of taking an argument of tile passability,
+  use the passibility of the tile where the fill started.
+
+  Overload the GameMap::path() command to allow the calculation paths between a
+  pair of creature, a creature and a tile,  etc, do the same for other functions?
+

+
+  When a level is loaded the number of tiles, classes, and creatures loaded is
+  displayed, make this also display the number of MapLights, etc.  Possibly
+  make the save command do the same.



*  Add tile colors to the level file and network protocols.

*  Add a seperate thread to generate a pool of 5000 or so random numbers for
*  use when needed and make the randomDouble, etc. functions consumers on this pool.

*  Begin phasing out snprintf since it is not portable.

*  implement history on the terminal.
*  implement line editing on the terminal.
	Both of these will be fixed by moving to a better terminal, see:
	http://www.ogre3d.org/wiki/index.php/CodeSnippits#Console

*  Add play, pause, and single turn commands to the terminal to aid in AI
*  debugging. 

*  Create various levels of quality for each mesh and make a RenderRequest that
*  switches to new meshes when some criteria is met (use something stable like
*  num items onscreen at once to avoid churning between mesh detail levels, or
*  change the meshes one at a time and re-evaluate).  It looks like OGRE has a
*  built in mechanism to do this dynamically.

*  Color chat messages with the color of the player who sent them.

*  Make use of std::set instead of std::vector where appropriate.



 ---------------

*  Fix the issue with Mouse move.

*  find out about separate subtraction and multiply issue in
*  ExampleFrameListener::mouseMoved(const OIS::MouseEvent &arg)

 ---------------

*  add a disconnect command to stop the running client or server thread.

