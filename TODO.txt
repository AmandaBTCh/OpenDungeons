--------------- BUGS: ---------------
*  fix keyboard repeat issue (when the game crashes keyboard repeat is disabled
*  but the OS still thinks it's on, turning it off and then back on again
*  restores the functionality).  This seems to be a bug in OIS so there might
*  not be anything we can do about it.

*  Fix crash on loading a new map from the server, I think it has to do with
*  getting peices of messages in a single packet.  This assumption may or may
*  not be true, it may be that the RenderQueue is somehow processing the
*  addDestination message before the createMesh message.

*  The GameMap::cutCorners() function sometimes causes creatures to walk
*  through walls, this could be a problem with the lineOfSight function.
*  Actually I think it has to do with Creature::positionTile(), this is mostly
*  fixed although positionTile() may still need some work.

*  The client has code to handle when messages are split across packets, but
*  the server does not.  This needs to be added.

*  when the terminal becomes active if a key is held down the keyup message
*  gets caught by the terminal and the key is "stuck" down.

*  Client and server need to negiotiate and set a color for the newly connected
*  client.

*  Visual debugging entities for creatures dissappear after a short time.

*  Make the terminal "host" command automatically close the terminal.

*  When a level is loaded via the terminal, the room tiles are not deleted.
*  This is probably a bug in GameMap::clear().

*  When creatures are in the state CreatureAction::maneuver, they sometimes get
*  "stuck" behind an obstacle since they only locally follow the field
*  gradient.  This can be fixed by making them make use of GameMap::path() to
*  find a good path to the destination and sticking with it far enough to get
*  them to their destination.

*  Add a vector of failedGoals to the Seat class similar to completedGoals.



--------------- FEATURE ADDITIONS: ---------------
*  Add tile colors to the level file and network protocols.

*  Add a seperate thread to generate a pool of 5000 or so random numbers for
*  use when needed and make the randomDouble, etc. functions consumers on this pool.

*  Add terminal command 'ls levels'

*  Begin phasing out snprintf since it is not portable.

*  Add a terminal command 'chathelp' which will lookup a help message and then
*  chat it to the people in the game, to allow for showing people how to do stuff.

*  Make the HP loaded by the creature class the max HP and make the creature IO
*  read/write the current HP.

*  implement history on the terminal.

*  implement line editing on the terminal.

*  Add a keyboard controls help message under "help keys".

*  add a flyTo method to make the camera fly to a particular location (and
*  orientation?).

*  Store creature classes and class descriptions in maps rather than vectors to
*  allow for faster lookups.

*  Add play, pause, and single turn commands to the terminal to aid in AI
*  debugging. 

*  Add a terminal command to set the number of chat messages and the time to
*  display them for (both as one command maybe).

*  Overload the << operator on the Player class, do the same for all the
*  others.

*  Add upkeep rounds to the GameMap::doTurn() method.

*  Create various levels of quality for each mesh and make a RenderRequest that
*  switches to new meshes when some criteria is met (use something stable like
*  num items onscreen at once to avoid churning between mesh detail levels, or
*  change the meshes one at a time and re-evaluate).  It looks like OGRE has a
*  built in mechanism to do this dynamically.

*  Test limiting the number of render requests that can be handled per frame,
*  initial tests did not seem encouraging so maybe this is a bad idea.

*  Add terminal commands to set the max number and max display time of chat
*  messages.

*  Color chat messages with the color of the player who sent them.

*  Make use of std::set instead of std::vector where appropriate.

 ---------------

*  Fix the issue with Mouse move.

*  find out about separate subtraction and multiply issue in
*  ExampleFrameListener::mouseMoved(const OIS::MouseEvent &arg)

 ---------------

*  make camera center stay focused on the same point and rotate around it
*  rather than rotating the camera around a fixed point.

*  add a disconnect command to stop the running client or server thread.


