!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ChatMessage	src/ChatMessage.cpp	/^ChatMessage::ChatMessage()$/;"	f	class:ChatMessage
ChatMessage	src/ChatMessage.cpp	/^ChatMessage::ChatMessage(string nNick, string nMessage, time_t nRecvTime, time_t nSendTime)$/;"	f	class:ChatMessage
Creature	src/Creature.cpp	/^Creature::Creature()$/;"	f	class:Creature
Creature	src/Creature.cpp	/^Creature::Creature(string nClassName, string nMeshName, Ogre::Vector3 nScale, int nHP, int nMana, double nSightRadius, double nDigRate)$/;"	f	class:Creature
CreatureAction	src/CreatureAction.cpp	/^CreatureAction::CreatureAction()$/;"	f	class:CreatureAction
ExampleFrameListener	src/ExampleFrameListener.cpp	/^ExampleFrameListener::ExampleFrameListener(RenderWindow* win, Camera* cam, SceneManager *sceneManager, CEGUI::Renderer *renderer, bool bufferedKeys, bool bufferedMouse, bool bufferedJoy)$/;"	f	class:ExampleFrameListener
MAX_FRAMES_PER_SECOND	src/main.cpp	/^int MAX_FRAMES_PER_SECOND = 25;$/;"	v
MOTD	src/main.cpp	/^string MOTD = (string)"Welcome to Open Dungeons\\tVersion:  " + VERSION;$/;"	v
MapEditor	src/MapEditor.cpp	/^MapEditor::MapEditor()$/;"	f	class:MapEditor
RenderRequest	src/RenderRequest.cpp	/^RenderRequest::RenderRequest()$/;"	f	class:RenderRequest
Socket	src/Socket.cpp	/^Socket::Socket() :$/;"	f	class:Socket
TextRenderer	src/TextRenderer.cpp	/^TextRenderer::TextRenderer()$/;"	f	class:TextRenderer
Tile	src/Tile.cpp	/^Tile::Tile()$/;"	f	class:Tile
Tile	src/Tile.cpp	/^Tile::Tile(int nX, int nY, TileType nType, int nFullness)$/;"	f	class:Tile
WIN32_LEAN_AND_MEAN	src/main.cpp	25;"	d	file:
WinMain	src/main.cpp	/^INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )$/;"	f
accept	src/Socket.cpp	/^bool Socket::accept ( Socket& new_socket ) const$/;"	f	class:Socket
addClassDescription	src/GameMap.cpp	/^void GameMap::addClassDescription(Creature *c)$/;"	f	class:GameMap
addClassDescription	src/GameMap.cpp	/^void GameMap::addClassDescription(Creature c)$/;"	f	class:GameMap
addCreature	src/GameMap.cpp	/^void GameMap::addCreature(Creature *c)$/;"	f	class:GameMap
addCreature	src/Tile.cpp	/^void Tile::addCreature(Creature *c)$/;"	f	class:Tile
addCreatureToHand	src/GameMap.cpp	/^void GameMap::addCreatureToHand(Creature *c)$/;"	f	class:GameMap
addDestination	src/Creature.cpp	/^void Creature::addDestination(int x, int y)$/;"	f	class:Creature
addTextBox	src/TextRenderer.cpp	/^void TextRenderer::addTextBox($/;"	f	class:TextRenderer
addTile	src/GameMap.cpp	/^void GameMap::addTile(Tile *t)$/;"	f	class:GameMap
bind	src/Socket.cpp	/^bool Socket::bind ( const int port )$/;"	f	class:Socket
chooseSceneManager	src/MapEditor.cpp	/^void MapEditor::chooseSceneManager(void)$/;"	f	class:MapEditor
clearAll	src/GameMap.cpp	/^void GameMap::clearAll()$/;"	f	class:GameMap
clearClasses	src/GameMap.cpp	/^void GameMap::clearClasses()$/;"	f	class:GameMap
clearCreatures	src/GameMap.cpp	/^void GameMap::clearCreatures()$/;"	f	class:GameMap
clearTiles	src/GameMap.cpp	/^void GameMap::clearTiles()$/;"	f	class:GameMap
clientSocketProcessor	src/Client.cpp	/^void *clientSocketProcessor(void *p)$/;"	f
connect	src/Socket.cpp	/^bool Socket::connect ( const std::string host, const int port )$/;"	f	class:Socket
convertButton	src/ExampleFrameListener.cpp	/^CEGUI::MouseButton convertButton(OIS::MouseButtonID buttonID)$/;"	f
create	src/Socket.cpp	/^bool Socket::create()$/;"	f	class:Socket
createAllEntities	src/GameMap.cpp	/^void GameMap::createAllEntities()$/;"	f	class:GameMap
createCamera	src/MapEditor.cpp	/^void MapEditor::createCamera(void)$/;"	f	class:MapEditor
createFrameListener	src/MapEditor.cpp	/^void MapEditor::createFrameListener(void)$/;"	f	class:MapEditor
createMesh	src/Creature.cpp	/^void Creature::createMesh()$/;"	f	class:Creature
createMesh	src/Tile.cpp	/^void Tile::createMesh()$/;"	f	class:Tile
createNewMap	src/GameMap.cpp	/^void GameMap::createNewMap(int xSize, int ySize)$/;"	f	class:GameMap
createScene	src/MapEditor.cpp	/^void MapEditor::createScene(void)$/;"	f	class:MapEditor
createVisualDebugEntities	src/Creature.cpp	/^void createVisualDebugEntities()$/;"	f
creatureAIThread	src/Server.cpp	/^void *creatureAIThread(void *p)$/;"	f
deleteYourself	src/Creature.cpp	/^void Creature::deleteYourself()$/;"	f	class:Creature
deleteYourself	src/Tile.cpp	/^void Tile::deleteYourself()$/;"	f	class:Tile
destroyMesh	src/Creature.cpp	/^void Creature::destroyMesh()$/;"	f	class:Creature
destroyMesh	src/Tile.cpp	/^void Tile::destroyMesh()$/;"	f	class:Tile
destroyVisualDebugEntities	src/Creature.cpp	/^void destroyVisualDebugEntities()$/;"	f
doTurn	src/Creature.cpp	/^void Creature::doTurn()$/;"	f	class:Creature
doTurn	src/GameMap.cpp	/^void GameMap::doTurn()$/;"	f	class:GameMap
executePromptCommand	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::executePromptCommand()$/;"	f	class:ExampleFrameListener
forceLowercase	src/Functions.cpp	/^string forceLowercase(string s)$/;"	f
formatCommand	src/Server.cpp	/^string formatCommand(string command, string arguments)$/;"	f
frameEnded	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::frameEnded(const FrameEvent& evt)$/;"	f	class:ExampleFrameListener
frameStarted	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::frameStarted(const FrameEvent& evt)$/;"	f	class:ExampleFrameListener
gameMap	src/main.cpp	/^GameMap gameMap;$/;"	v
gaussianRandomDouble	src/Functions.cpp	/^double gaussianRandomDouble()$/;"	f
getAnimationState	src/Creature.cpp	/^AnimationState* Creature::getAnimationState()$/;"	f	class:Creature
getClass	src/GameMap.cpp	/^Creature* GameMap::getClass(string query)$/;"	f	class:GameMap
getClassDescription	src/GameMap.cpp	/^Creature* GameMap::getClassDescription(int index)$/;"	f	class:GameMap
getCreature	src/GameMap.cpp	/^Creature* GameMap::getCreature(int index)$/;"	f	class:GameMap
getCreature	src/GameMap.cpp	/^Creature* GameMap::getCreature(string cName)$/;"	f	class:GameMap
getCreature	src/Tile.cpp	/^Creature* Tile::getCreature(int index)$/;"	f	class:Tile
getCreatureInHand	src/GameMap.cpp	/^Creature* GameMap::getCreatureInHand(int i)$/;"	f	class:GameMap
getFullness	src/Tile.cpp	/^int Tile::getFullness()$/;"	f	class:Tile
getFullnessMeshNumber	src/Tile.cpp	/^int Tile::getFullnessMeshNumber()$/;"	f	class:Tile
getHelpText	src/ExampleFrameListener.cpp	/^string ExampleFrameListener::getHelpText(string arg)$/;"	f	class:ExampleFrameListener
getMarkedForDigging	src/Tile.cpp	/^bool Tile::getMarkedForDigging()$/;"	f	class:Tile
getPosition	src/Creature.cpp	/^Ogre::Vector3 Creature::getPosition()$/;"	f	class:Creature
getSelected	src/Tile.cpp	/^bool Tile::getSelected()$/;"	f	class:Tile
getTile	src/GameMap.cpp	/^Tile* GameMap::getTile(int index)$/;"	f	class:GameMap
getTile	src/GameMap.cpp	/^Tile* GameMap::getTile(int x, int y)$/;"	f	class:GameMap
getType	src/Tile.cpp	/^Tile::TileType Tile::getType()$/;"	f	class:Tile
handleAcceleration	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::handleAcceleration(double accelFactor, double accelLimit, double &accel, bool &positive, bool driven, bool sameDir)$/;"	f	class:ExampleFrameListener
keyPressed	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::keyPressed(const OIS::KeyEvent &arg)$/;"	f	class:ExampleFrameListener
keyReleased	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::keyReleased(const OIS::KeyEvent &arg)$/;"	f	class:ExampleFrameListener
listen	src/Socket.cpp	/^bool Socket::listen() const$/;"	f	class:Socket
me	src/main.cpp	/^Player *me;$/;"	v
mouseMoved	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::mouseMoved(const OIS::MouseEvent &arg)$/;"	f	class:ExampleFrameListener
mousePressed	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id)$/;"	f	class:ExampleFrameListener
mouseReleased	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::mouseReleased(const OIS::MouseEvent &arg, OIS::MouseButtonID id)$/;"	f	class:ExampleFrameListener
moveCamera	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::moveCamera(double frameTime)$/;"	f	class:ExampleFrameListener
ms_Singleton	src/TextRenderer.cpp	/^template<> TextRenderer* Ogre::Singleton<TextRenderer>::ms_Singleton = 0;$/;"	m	class:Ogre::Singleton	file:
nextTileFullness	src/Tile.cpp	/^int Tile::nextTileFullness(int f)$/;"	f	class:Tile
nextTileType	src/Tile.cpp	/^Tile::TileType Tile::nextTileType(TileType t)$/;"	f	class:Tile
numClassDescriptions	src/GameMap.cpp	/^int GameMap::numClassDescriptions()$/;"	f	class:GameMap
numCreatures	src/GameMap.cpp	/^int GameMap::numCreatures()$/;"	f	class:GameMap
numCreaturesInCell	src/Tile.cpp	/^int Tile::numCreaturesInCell()$/;"	f	class:Tile
numCreaturesInHand	src/GameMap.cpp	/^int GameMap::numCreaturesInHand()$/;"	f	class:GameMap
numTiles	src/GameMap.cpp	/^int GameMap::numTiles()$/;"	f	class:GameMap
operator <<	src/Creature.cpp	/^ostream& operator<<(ostream& os, Creature *c)$/;"	f
operator <<	src/Tile.cpp	/^ostream& operator<<(ostream& os, Tile *t)$/;"	f
operator >>	src/Creature.cpp	/^istream& operator>>(istream& is, Creature *c)$/;"	f
operator >>	src/Tile.cpp	/^istream& operator>>(istream& is, Tile *t)$/;"	f
parseCommand	src/Server.cpp	/^void parseCommand(string command, string &commandName, string &arguments)$/;"	f
path	src/GameMap.cpp	/^list<Tile*> GameMap::path(int x1, int y1, int x2, int y2)$/;"	f	class:GameMap
players	src/main.cpp	/^vector<Player*> players;$/;"	v
positionTile	src/Creature.cpp	/^Tile* Creature::positionTile()$/;"	f	class:Creature
printText	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::printText(string text)$/;"	f	class:ExampleFrameListener
processChatMessage	src/Server.cpp	/^ChatMessage *processChatMessage(string arguments)$/;"	f
processUnbufferedKeyInput	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::processUnbufferedKeyInput(const FrameEvent& evt)$/;"	f	class:ExampleFrameListener
processUnbufferedMouseInput	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::processUnbufferedMouseInput(const FrameEvent& evt)$/;"	f	class:ExampleFrameListener
quit	src/ExampleFrameListener.cpp	/^bool ExampleFrameListener::quit(const CEGUI::EventArgs &e)$/;"	f	class:ExampleFrameListener
randomDouble	src/Functions.cpp	/^double randomDouble(double min,double max)$/;"	f
readGameMapFromFile	src/Functions.cpp	/^void readGameMapFromFile(string fileName)$/;"	f
recv	src/Socket.cpp	/^int Socket::recv ( std::string& s ) const$/;"	f	class:Socket
refreshMesh	src/Tile.cpp	/^void Tile::refreshMesh()$/;"	f	class:Tile
removeCreature	src/Tile.cpp	/^void Tile::removeCreature(Creature *c)$/;"	f	class:Tile
removeCreatureFromHand	src/GameMap.cpp	/^void GameMap::removeCreatureFromHand(int i)$/;"	f	class:GameMap
removeTextBox	src/TextRenderer.cpp	/^void TextRenderer::removeTextBox(const std::string& ID)$/;"	f	class:TextRenderer
renderQueue	src/main.cpp	/^deque<RenderRequest*> renderQueue;$/;"	v
renderQueueSemaphore	src/main.cpp	/^sem_t renderQueueSemaphore;$/;"	v
seedRandomNumberGenerator	src/Functions.cpp	/^void seedRandomNumberGenerator()$/;"	f
send	src/Socket.cpp	/^bool Socket::send ( const std::string s ) const$/;"	f	class:Socket
serverSocketProcessor	src/Server.cpp	/^void *serverSocketProcessor(void *p)$/;"	f
setAnimationState	src/Creature.cpp	/^void Creature::setAnimationState(string s)$/;"	f	class:Creature
setFullness	src/Tile.cpp	/^void Tile::setFullness(int f)$/;"	f	class:Tile
setMarkedForDigging	src/Tile.cpp	/^void Tile::setMarkedForDigging(bool s)$/;"	f	class:Tile
setPosition	src/Creature.cpp	/^void Creature::setPosition(Ogre::Vector3 v)$/;"	f	class:Creature
setPosition	src/Creature.cpp	/^void Creature::setPosition(double x, double y, double z)$/;"	f	class:Creature
setSelected	src/Tile.cpp	/^void Tile::setSelected(bool s)$/;"	f	class:Tile
setText	src/TextRenderer.cpp	/^void TextRenderer::setText(const std::string& ID, const std::string& Text)$/;"	f	class:TextRenderer
setType	src/Tile.cpp	/^void Tile::setType(TileType t)$/;"	f	class:Tile
set_non_blocking	src/Socket.cpp	/^void Socket::set_non_blocking ( const bool b )$/;"	f	class:Socket
showDebugOverlay	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::showDebugOverlay(bool show)$/;"	f	class:ExampleFrameListener
tileTypeToString	src/Tile.cpp	/^string Tile::tileTypeToString(TileType t)$/;"	f	class:Tile
turnNumber	src/main.cpp	/^long int turnNumber = 1;$/;"	v
turnsPerSecond	src/main.cpp	/^double turnsPerSecond = 1.0;$/;"	v
updateStats	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::updateStats(void)$/;"	f	class:ExampleFrameListener
updateVisibleTiles	src/Creature.cpp	/^void Creature::updateVisibleTiles()$/;"	f	class:Creature
windowClosed	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::windowClosed(RenderWindow* rw)$/;"	f	class:ExampleFrameListener
windowResized	src/ExampleFrameListener.cpp	/^void ExampleFrameListener::windowResized(RenderWindow* rw)$/;"	f	class:ExampleFrameListener
writeGameMapToFile	src/Functions.cpp	/^void writeGameMapToFile(string fileName)$/;"	f
~ExampleFrameListener	src/ExampleFrameListener.cpp	/^ExampleFrameListener::~ExampleFrameListener()$/;"	f	class:ExampleFrameListener
~MapEditor	src/MapEditor.cpp	/^MapEditor::~MapEditor() $/;"	f	class:MapEditor
~Socket	src/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
